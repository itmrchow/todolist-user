// Code generated by mockery v2.53.2. DO NOT EDIT.

package repository

import (
	context "context"

	entity "github.com/itmrchow/todolist-users/internal/entity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockUsersRepository is an autogenerated mock type for the UsersRepository type
type MockUsersRepository struct {
	mock.Mock
}

type MockUsersRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsersRepository) EXPECT() *MockUsersRepository_Expecter {
	return &MockUsersRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, user
func (_m *MockUsersRepository) Create(ctx context.Context, user *entity.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUsersRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - user *entity.User
func (_e *MockUsersRepository_Expecter) Create(ctx interface{}, user interface{}) *MockUsersRepository_Create_Call {
	return &MockUsersRepository_Create_Call{Call: _e.mock.On("Create", ctx, user)}
}

func (_c *MockUsersRepository_Create_Call) Run(run func(ctx context.Context, user *entity.User)) *MockUsersRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.User))
	})
	return _c
}

func (_c *MockUsersRepository_Create_Call) Return(_a0 error) *MockUsersRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersRepository_Create_Call) RunAndReturn(run func(context.Context, *entity.User) error) *MockUsersRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockUsersRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUsersRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockUsersRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockUsersRepository_Delete_Call {
	return &MockUsersRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockUsersRepository_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockUsersRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockUsersRepository_Delete_Call) Return(_a0 error) *MockUsersRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersRepository_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockUsersRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockUsersRepository) Get(ctx context.Context, id uuid.UUID) (*entity.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockUsersRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockUsersRepository_Expecter) Get(ctx interface{}, id interface{}) *MockUsersRepository_Get_Call {
	return &MockUsersRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockUsersRepository_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockUsersRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockUsersRepository_Get_Call) Return(_a0 *entity.User, _a1 error) *MockUsersRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersRepository_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*entity.User, error)) *MockUsersRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *MockUsersRepository) GetByEmail(ctx context.Context, email string) (*entity.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersRepository_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type MockUsersRepository_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUsersRepository_Expecter) GetByEmail(ctx interface{}, email interface{}) *MockUsersRepository_GetByEmail_Call {
	return &MockUsersRepository_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *MockUsersRepository_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUsersRepository_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUsersRepository_GetByEmail_Call) Return(_a0 *entity.User, _a1 error) *MockUsersRepository_GetByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersRepository_GetByEmail_Call) RunAndReturn(run func(context.Context, string) (*entity.User, error)) *MockUsersRepository_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, user
func (_m *MockUsersRepository) Update(ctx context.Context, user *entity.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUsersRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - user *entity.User
func (_e *MockUsersRepository_Expecter) Update(ctx interface{}, user interface{}) *MockUsersRepository_Update_Call {
	return &MockUsersRepository_Update_Call{Call: _e.mock.On("Update", ctx, user)}
}

func (_c *MockUsersRepository_Update_Call) Run(run func(ctx context.Context, user *entity.User)) *MockUsersRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.User))
	})
	return _c
}

func (_c *MockUsersRepository_Update_Call) Return(_a0 error) *MockUsersRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersRepository_Update_Call) RunAndReturn(run func(context.Context, *entity.User) error) *MockUsersRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsersRepository creates a new instance of MockUsersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsersRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsersRepository {
	mock := &MockUsersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
